package sut.game01.core;
import org.jbox2d.callbacks.ContactImpulse;
import org.jbox2d.callbacks.ContactListener;
import org.jbox2d.callbacks.DebugDraw;
import org.jbox2d.collision.Manifold;
import org.jbox2d.collision.shapes.CircleShape;
import org.jbox2d.collision.shapes.EdgeShape;
import org.jbox2d.collision.shapes.PolygonShape;
import org.jbox2d.common.Vec2;
import org.jbox2d.dynamics.*;
import org.jbox2d.dynamics.contacts.Contact;
import playn.core.*;
import playn.core.util.Clock;
import tripleplay.game.Screen;
import tripleplay.game.ScreenStack;
import characters.Airplane;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import static playn.core.PlayN.*;

public class Play1 extends Screen{
    private  final ScreenStack ss;
    private  ImageLayer bg;
    private  ImageLayer backButton;
    private  Airplane airplane;


    public static float M_PER_PIXEL = 1 / 26.6666667f;
    private static int width = 24;
    private static int height = 18;
    private World world;
    private boolean showDebugDraw = true;
    private DebugDrawBox2D debugDraw;
    private int count = -1;
    private int z;

    BodyDef bodyDef;
    Airplane air;
    ArrayList<Airplane> collect = new ArrayList<Airplane>();

    private HashMap bodies = new HashMap<Body,Json.Object>();
    private int i = 0;
    private String debugString = "Hello";
    private  int score = 0 ;


    public Play1(final ScreenStack ss) {
        this.ss = ss;
        this.layer.clear();
        //graphics().rootLayer().clear();

        ///==============================WORLD SETUP ========================///
        final Vec2 gravity = new Vec2(0.0f , 10.0f);
        world = new World(gravity);
        world.setWarmStarting(true);
        world.setAutoClearForces(true);

        ///==============================OBJECT SETUP ========================///
        BodyDef bodyDef1 = new BodyDef();
        bodyDef1.type = BodyType.STATIC;

        bodyDef1.position = new Vec2(200f / 26.666667f,200f / 26.666667f);
        Body body1 = world.createBody(bodyDef1);
        bodies.put(body1, "static_" + i);
        i++;

        CircleShape shape1 = new CircleShape();
        shape1.setRadius(0.4f);
        FixtureDef fixtureDef = new FixtureDef();
        fixtureDef.shape = shape1;

        body1.createFixture(fixtureDef);
        body1.setLinearDamping(0.2f);

        world.setContactListener(new ContactListener() {
            @Override
            public void beginContact(Contact contact) {

                Body a = contact.getFixtureA().getBody();
                Body b = contact.getFixtureB().getBody();

                String name = (String) bodies.get(a);

                if (bodies.get(a) != null){
                    if (bodies.get(a) == "static_0" || bodies.get(b) == "static_0"){
                        score = 10;
                    }
                    debugString = bodies.get(a) + " contact with " + bodies.get(b);

                    // b.applyForce(new Vec2(200f,0),b.getPosition());
                    /*shoot */ b.applyLinearImpulse(new Vec2(5f,0),b.getPosition());
                }

            }

            @Override
            public void endContact(Contact contact) {         }

            @Override
            public void preSolve(Contact contact, Manifold manifold) {            }

            @Override
            public void postSolve(Contact contact, ContactImpulse contactImpulse) {

            }
        });

        mouse().setListener(new Mouse.Adapter(){
            @Override
            public void onMouseUp(Mouse.ButtonEvent event) {
                BodyDef bodyDef = new BodyDef();
                bodyDef.type = BodyType.DYNAMIC;

                bodyDef.position = new Vec2(event.x() / 26.666667f , event.y() / 26.666667f);
                Body body = world.createBody(bodyDef);

                bodies.put(body, "test_" + i);
                i++;

                CircleShape shape = new CircleShape();
                shape.setRadius(0.4f);

                FixtureDef fixtureDef = new FixtureDef();
                fixtureDef.shape = shape;
                fixtureDef.density = 0.4f;
                fixtureDef.friction = 0.1f;
                fixtureDef.restitution = 0.8f;
                body.createFixture(fixtureDef);
                body.setLinearDamping(0.2f);



                /*
                  air = new  Airplane(world ,event.x() ,event.y());
                  collect.add(air);
                  count++;
                for (int i = 0 ; i <= count ; i++){
                    graphics().rootLayer().add(collect.get(i).layer());
                }*/

                /*bodyDef = new BodyDef();
                bodyDef.type = BodyType.DYNAMIC;
                bodyDef.position = new Vec2(event.x() * M_PER_PIXEL,event.y()*M_PER_PIXEL);
                Body body = world.createBody(bodyDef);

                PolygonShape shape = new PolygonShape();
                shape.setAsBox(1,1);
                FixtureDef fixtureDef = new FixtureDef();
                fixtureDef.shape = shape;
                fixtureDef.density = 0.4f;
                fixtureDef.friction = 0.2f;
                fixtureDef.restitution = 0.4f;
                body.createFixture(fixtureDef);
                body.setLinearDamping(0.2f);*/
            }
        });



        keyboard().setListener(new Keyboard.Adapter(){
            @Override
            public void onKeyUp(Keyboard.Event event) {
                if(event.key() == Key.SPACE){

                    for(Map.Entry<Body,Json.Object> b : (Set<Map.Entry<Body,Json.Object>>)bodies.entrySet() ){
                        b.getKey().applyForce(new Vec2(20f,-100f),b.getKey().getPosition());
                        //b.getKey().applyLinearImpulse(new Vec2(5f, 0), b.getKey().getPosition());
                    }


                }
            }
        });



        /*Image bgImage = assets().getImage("Images/story/play1.png");
        this.bg = graphics().createImageLayer(bgImage);
           */
        Image backImage = assets().getImage("Images/back.png");
        backButton = graphics().createImageLayer(backImage);
        backButton.setTranslation(0,400);




        backButton.addListener(new Mouse.LayerAdapter(){
            @Override
            public void onMouseUp(Mouse.ButtonEvent event){
                ss.remove(ss.top());
                ss.remove(ss.top());
               // System.out.println( ss.size());
                ss.push(new HomeScreen(ss));



            }
        });
    }

    @Override
    public void wasShown() {
        super.wasShown();
        //this.layer.add(bg);
        this.layer.add(backButton);

       // airplane = new Airplane(world,560f ,400f);
        //airplane.layer().setScale(0.5f,0.5f);
       // this.layer.add(airplane.layer());

        if (showDebugDraw){
            CanvasImage image = graphics().createImage(
                    (int) (width / Play1.M_PER_PIXEL),
                    (int) (height / Play1.M_PER_PIXEL));
            layer.add(graphics().createImageLayer(image));
            debugDraw = new DebugDrawBox2D();
            debugDraw.setCanvas(image);
            debugDraw.setFlipY(false);
            debugDraw.setStrokeAlpha(150);
            debugDraw.setFillAlpha(75);
            debugDraw.setStrokeWidth(2.0f);
            debugDraw.setFlags(DebugDraw.e_shapeBit |
                    DebugDraw.e_jointBit |
                    DebugDraw.e_aabbBit);
            debugDraw.setCamera(0, 0, 1f / Play1.M_PER_PIXEL);
            world.setDebugDraw(debugDraw);

        }
        Body ground = world.createBody(new BodyDef());
        EdgeShape groundShape = new EdgeShape();
        groundShape.set(new Vec2(0, height), new Vec2(width, height));
        ground.createFixture(groundShape, 0.0f);

        Body ground2 = world.createBody(new BodyDef());
        EdgeShape groundShape2 = new EdgeShape();
        groundShape2.set(new Vec2(0, 0), new Vec2(width, 0));
        ground.createFixture(groundShape2, 0.0f);

        Body ground3 = world.createBody(new BodyDef());
        EdgeShape groundShape3 = new EdgeShape();
        groundShape2.set(new Vec2(0, 0), new Vec2(0, height));
        ground.createFixture(groundShape2, 0.0f);

        Body ground4 = world.createBody(new BodyDef());
        EdgeShape groundShape4 = new EdgeShape();
        groundShape2.set(new Vec2(width, 0), new Vec2(width, height));
        ground.createFixture(groundShape2, 0.0f);



    }
    @Override
    public void update(int delta){
        super.update(delta);
        world.step(0.033f,10,10);
       // airplane.update(delta);
        /*for (int i = 0 ; i <= count ; i++){
            collect.get(i).update(delta);
        }*/

    }

    @Override
    public void paint(Clock clock) {
        super.paint(clock);
        //airplane.paint(clock);
        for (int i = 0 ; i <= count ; i++){
            collect.get(i).paint(clock);
        }
        if (showDebugDraw){
            debugDraw.getCanvas().clear();
            world.drawDebugData();
            debugDraw.getCanvas().drawText( "Score: "+String.valueOf(score),100f,115f);
        }

    }
}
